basePath: /
definitions:
  models.Company:
    type: object
  models.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  models.ModifyUserRequest:
    properties:
      email:
        type: string
      fullName:
        type: string
      phone:
        type: string
    type: object
  models.RegisterRequest:
    properties:
      email:
        type: string
      fullName:
        type: string
      password:
        type: string
      phone:
        type: string
    type: object
  models.Response:
    properties:
      data:
        additionalProperties: {}
        type: object
      message:
        type: string
      success:
        type: boolean
    type: object
host: localhost:8080
info:
  contact:
    email: ebubekiryigit6@gmail.com
    name: Ebubekir YiÄŸit
    url: https://github.com/ebubekiryigit
  description: GoLang - Gin - RESTful - MongoDB - Redis
  license:
    name: MIT License
    url: https://opensource.org/licenses/MIT
  termsOfService: https://swagger.io/terms/
  title: GoLang Rest API Starter Doc
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: login a user
      parameters:
      - description: Login Request
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
      summary: Login
      tags:
      - auth
  /auth/register:
    put:
      consumes:
      - application/json
      description: registers a user
      parameters:
      - description: Register Request
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/models.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
      summary: Register
      tags:
      - auth
  /company:
    get:
      consumes:
      - application/json
      description: gets the company
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
      summary: GetCompany
      tags:
      - company
    patch:
      consumes:
      - application/json
      description: modifies the company
      parameters:
      - description: Request
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/models.Company'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Company'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Company'
      summary: ModifyCompany
      tags:
      - company
  /company/attendances/{page}:
    get:
      consumes:
      - application/json
      description: gets the company attendances
      parameters:
      - description: Page
        in: path
        name: page
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
      summary: GetCompanyAttendances
      tags:
      - company
  /company/members/{page}:
    get:
      consumes:
      - application/json
      description: gets the company members
      parameters:
      - description: Page
        in: path
        name: page
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
      summary: GetCompanyMembers
      tags:
      - company
  /ping:
    get:
      consumes:
      - application/json
      description: check server
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
      summary: Ping
      tags:
      - ping
  /user/{userId}/schedules:
    post:
      consumes:
      - application/json
      description: Create user schedule
      parameters:
      - description: Schedule title
        in: body
        name: title
        required: true
        schema:
          type: string
      - description: Schedule start time
        in: body
        name: startTime
        required: true
        schema:
          type: string
      - description: Schedule end time
        in: body
        name: endTime
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
      security:
      - ApiKeyAuth: []
      summary: Create user schedule
      tags:
      - schedule
  /user/{userId}/schedules/:page:
    get:
      consumes:
      - application/json
      description: Get user schedules
      parameters:
      - description: Page number
        in: path
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
      security:
      - ApiKeyAuth: []
      summary: Get user schedules
      tags:
      - schedule
  /user/{userId}/schedules/{scheduleId}:
    get:
      consumes:
      - application/json
      description: Get user schedule
      parameters:
      - description: Schedule ID
        in: path
        name: scheduleId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
      security:
      - ApiKeyAuth: []
      summary: Get user schedule
      tags:
      - schedule
  /users/{userId}:
    get:
      consumes:
      - application/json
      description: gets the current user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
      summary: GetCurrentUser
      tags:
      - user
    patch:
      consumes:
      - application/json
      description: modifies the current user
      parameters:
      - description: Request
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/models.ModifyUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
      summary: ModifyCurrentUser
      tags:
      - user
  /users/{userId}/attendances:
    post:
      consumes:
      - application/json
      description: checks in the user
      parameters:
      - description: IP Address
        in: body
        name: ipAddress
        required: true
        schema:
          type: string
      - description: Status
        in: body
        name: status
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
      summary: AttendanceCheckIn
      tags:
      - attendance
  /users/{userId}/attendances/:page:
    get:
      consumes:
      - application/json
      description: gets the user attendances
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
      summary: GetUserAttendances
      tags:
      - attendance
  /users/{userId}/attendances/{attendanceId}:
    patch:
      consumes:
      - application/json
      description: checks out the user
      parameters:
      - description: Attendance ID
        in: path
        name: attendanceId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
      summary: AttendanceCheckOut
      tags:
      - attendance
schemes:
- http
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Bearer-Token
    type: apiKey
swagger: "2.0"
